name: Shared Build Workflow
permissions:
  {  }
on:
  workflow_call:
    inputs:
      version:
        description: 'Version of the build'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Check Java version
        run: java -version

      - name: Install Apache Jena
        run: |
          wget https://dlcdn.apache.org/jena/binaries/apache-jena-5.3.0.tar.gz
          tar -xzf apache-jena-5.3.0.tar.gz

      - name: Download external test files
        run: |
          curl -o test/Api.Tests/TestData/imf.ttl http://ns.imfid.org/20240531/imf-ontology.owl.ttl &
          curl -o test/Api.Tests/TestData/go.owl.xml http://current.geneontology.org/ontology/go.owl &
          curl -o "test/Api.Tests/TestData/LIS-14.ttl" https://rds.posccaesar.org/ontology/lis14/ont/core/4.0/LIS-14.ttl &
          wait
          ./apache-jena-5.3.0/bin/riot --output=TURTLE test/Api.Tests/TestData/go.owl.xml > test/Api.Tests/TestData/go.ttl

      - name: Format code
        run: dotnet format ./DagSemTools.sln --verbosity diagnostic --verify-no-changes --no-restore

      - name: Build projects
        run: |
          mkdir localNugetPackages
          projects=(
            "Ingress"
            "AlcTableau"
            "Rdf"
            "OwlOntology"
            "RdfOwlTranslator"
            "OWL2ALC"
            "Parser"
            "Turtle.Parser"
            "Datalog"
            "ELI"
            "Datalog.Parser"
            "OWL2RL2Datalog"
            "Manchester"
            "Manchester.Parser"
            "Api"
            "TestUtils"
            )
          for project in "${projects[@]}"; do
           echo "Building and packing project: $project"
           dotnet build --configuration Release /p:Version=${{ inputs.version }} ./src/$project/$project.*sproj
           dotnet pack --configuration Release /p:Version=${{ inputs.version }} --output localNugetPackages ./src/$project/$project.*sproj
          done

      - name: Build and run test projects
        timeout-minutes: 5
        run: |
          for project in test/*; do
              echo "Building test project: $project"
              dotnet build --configuration Release /p:Version=${{ inputs.version }} $project
              dotnet test --configuration Release /p:Version=${{ inputs.version }} $project
          done

          
      - name: Run nuget package tests
        timeout-minutes: 5
        run: dotnet test /p:Version=${{ inputs.version }} test/NugetTest/NugetTest.sln
        
      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./localNugetPackages/*.nupkg