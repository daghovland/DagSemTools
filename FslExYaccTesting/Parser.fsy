%{
open IriTools
open AlcTableau.ALC
%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token HELLO
%token INVERSE
%token SOME
%token ONLY
%token AND
%token OR
%token NOT
%token LPAREN
%token RPAREN
%token THAT
%token <string> FULLIRI
%token <string> ABBREVIATETEDIRI
%token <string> PREFIXEDIRI
%token SCHEME 

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < AlcTableau.ALC.Concept > description
%type < AlcTableau.ALC.Concept > start
%type < IriTools.IriReference > Iri

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: description EOF { $1 }

description:
    | conjunction OR conjunction { AlcTableau.ALC.Disjunction($1, $3) }
    | conjunction { $1 }
    
    
conjunction:
    | primary AND primary { AlcTableau.ALC.Conjunction($1, $3) }
    | primary { $1 }

primary:
    | NOT primary { AlcTableau.ALC.Negation($2) }
    | Iri { AlcTableau.ALC.ConceptName($1) }
    | LPAREN description RPAREN { $2 }

Iri: 
    | FULLIRI { $1 }
    | ABBREVIATETEDIRI { $1 }
    | PREFIXEDIRI { $1 } 

