{
namespace Parsers

open IriTools
open AlcTableau
open FSharp.Text.Lexing
open System

module ManchesterLexer
exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

let unreserved = ['A'-'Z' 'a'-'z' '0'-'9' '-' '_' '.' '~']
let reserved = ['!' '#' '$' '&' '\'' '(' ')' '*' '+' ',' '/' ':' ';' '=' '?' '@' '[' ']']
let pctEncoded = '%' ['0'-'9' 'A'-'F' 'a'-'f'] ['0'-'9' 'A'-'F' 'a'-'f']
let unicode = ['\u00A0'-'\uD7FF' '\uF900'-'\uFDCF' '\uFDF0'-'\uFFEF']
let iCharacter = unreserved | reserved | pctEncoded | unicode

let scheme =  "http" | "https"
let ihierpart = iCharacter +
let iquery = iCharacter +
let ifragment = iCharacter +

let RFC3987IRI = scheme ':' ihierpart ( '?'  iquery )? ( '#' ifragment )?

let fullIRI = '<' RFC3987IRI '>'


rule IRI =
  parse 
  | '<' { LESS_THAN }
  | '>' { GREATER_THAN }
  | RFC3987IRI { FULL_IRI ( IriReference (lexeme lexbuf) ) }
  | eof      { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line + 1) lexbuf.StartPos.Column)) }


and read_string (str: string) (ignorequote: bool) =
  parse
  | '"'           { if ignorequote then (read_string (str + "\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str + (lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }      
{  }